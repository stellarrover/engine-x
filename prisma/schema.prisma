datasource db {
    provider = "mysql"
    url      = env("DATABASE_URL")
}

generator client {
    provider = "prisma-client-js"
}

model User {
    id                  String   @id @db.VarChar(40)
    mobilePhoneNumber   String?  @unique @db.VarChar(20)
    username            String   @unique @db.VarChar(50)
    mobilePhoneVerified Boolean  @default(false)
    nickname            String?  @db.VarChar(30)
    biography           String?  @db.VarChar(1000)
    password            String?  @db.VarChar(40)
    avatar              String?  @db.LongText
    email               String?  @db.VarChar(255)
    emailVerified       Boolean  @default(false)
    subscribeNews       Boolean? @default(true)
    inactive            Boolean  @default(false)

    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt

    recordings              Recording[]
    thumbsLogs              ThumbsLog[]
    praiseLogs              PraiseLog[]
    socialInfo              UserSocialInfo[]
    userRoles               UserRole[]
    scenarioConfig          UserScenario[]
    UserSetting             UserSetting?
    UserShortcutConfig      UserShortcutConfig[]
    labels                  Label[]
    Channel                 Channel[]
    Category                Category[]
    ChannelMember           ChannelMember[]
    ChannelMemberInvitation ChannelMemberInvitation[]
    WorkflowNodes           WorkflowNode[]
}

model UserSetting {
    id     String @id @db.VarChar(40)
    userId String @unique @db.VarChar(40)

    fastMode Boolean? @default(false)
    aiMode   Boolean? @default(false)
    preview  Boolean? @default(true)
    devMode  Boolean? @default(false)

    rpm Int @default(5)
    rpd Int @default(50)

    user User @relation(fields: [userId], references: [id], onDelete: Cascade)

    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt
}

model UserScenario {
    userId     String   @db.VarChar(40)
    scenarioId String   @db.VarChar(40)
    href       String?  @db.Text
    createdAt  DateTime @default(now())
    updatedAt  DateTime @updatedAt

    user     User     @relation(fields: [userId], references: [id], onDelete: Cascade)
    scenario Scenario @relation(fields: [scenarioId], references: [id])

    @@id([userId, scenarioId])
}

model SystemShortcut {
    id         String @id @db.VarChar(40)
    workflowId String @unique @db.VarChar(40)

    name    String? @db.VarChar(40)
    iconUrl String? @db.VarChar(255)
    prompt  String? @db.VarChar(255)

    order     Int     @default(1)
    activated Boolean @default(true)
    pinned    Boolean @default(false)

    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt

    workflow            Recording            @relation(fields: [workflowId], references: [id], onDelete: Cascade)
    UserShortcutsConfig UserShortcutConfig[]
}

model UserShortcutConfig {
    id               String  @id @db.VarChar(40)
    userId           String  @db.VarChar(40)
    systemShortcutId String? @db.VarChar(40)
    workflowId       String? @db.VarChar(40)

    name    String? @db.VarChar(40)
    iconUrl String? @db.VarChar(255)
    prompt  String? @db.VarChar(255)

    order     Int     @default(1)
    activated Boolean @default(true)
    pinned    Boolean @default(false)

    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt

    user           User            @relation(fields: [userId], references: [id], onDelete: Cascade)
    systemShortcut SystemShortcut? @relation(fields: [systemShortcutId], references: [id], onDelete: Cascade)
    workflow       Recording?      @relation(fields: [workflowId], references: [id], onDelete: Cascade)

    @@unique([userId, systemShortcutId])
    @@unique([userId, workflowId])
}

model Scenario {
    id                String              @id @db.VarChar(40)
    name              String              @unique @db.VarChar(30)
    favicon           String?             @db.VarChar(1000)
    host              String?             @db.VarChar(255)
    createdAt         DateTime            @default(now())
    updatedAt         DateTime            @updatedAt
    UserScenario      UserScenario[]
    RecordingScenario RecordingScenario[]
    Category          Category[]
}

model UserSocialInfo {
    id           String   @id @db.VarChar(40)
    openId       String   @db.VarChar(40)
    nickname     String?  @db.VarChar(30)
    avatar       String?  @db.VarChar(255)
    userId       String   @db.VarChar(40)
    provider     String   @db.VarChar(20)
    accessToken  String   @db.VarChar(255)
    refreshToken String   @db.VarChar(255)
    expiresIn    Int
    createdAt    DateTime @default(now())
    updatedAt    DateTime @updatedAt

    user User @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model Channel {
    id   String @id @db.VarChar(40)
    name String @db.VarChar(255)

    type ChannelType @default(Public)

    deleted Boolean @default(false)

    createdAt DateTime  @default(now())
    updatedAt DateTime  @updatedAt
    deletedAt DateTime?

    creator   User   @relation(fields: [creatorId], references: [id], onDelete: Cascade)
    creatorId String @db.VarChar(40)

    lastEditorId String? @db.VarChar(40)

    Category       Category[]
    Recording      Recording[]
    ChannelSetting ChannelSetting?
    ChannelMember  ChannelMember[]
    transformed    Boolean         @default(false)

    @@index([id, deleted])
}

model ChannelSetting {
    id              String  @id @db.VarChar(40)
    description     String? @db.VarChar(255)
    avatar          String? @db.VarChar(255)
    background      String? @db.VarChar(255)
    canBeSearch     Boolean @default(false) // 可以被公开搜索到
    skipApplication Boolean @default(false) // 不需要申请就能加入channel

    channelId String  @unique @db.VarChar(40)
    channel   Channel @relation(fields: [channelId], references: [id], onDelete: Cascade)

    deleted Boolean @default(false)

    createdAt DateTime  @default(now())
    updatedAt DateTime  @updatedAt
    deletedAt DateTime?
}

model Category {
    id               String                   @id @db.VarChar(40)
    name             String?                  @db.VarChar(255)
    permissionPolicy CategoryPermissionPolicy @default(AllMembers)

    creatorId String? @db.VarChar(40)
    creator   User?   @relation(fields: [creatorId], references: [id], onDelete: Cascade)

    channelId String  @db.VarChar(40)
    channel   Channel @relation(fields: [channelId], references: [id], onDelete: Cascade)

    scenarioId String?   @db.VarChar(40)
    scenario   Scenario? @relation(fields: [scenarioId], references: [id], onDelete: Cascade)

    deleted Boolean @default(false)

    createdAt        DateTime           @default(now())
    updatedAt        DateTime           @updatedAt
    deletedAt        DateTime?
    CategoryMember   CategoryMember[]
    WorkflowCategory WorkflowCategory[]

    @@unique([channelId, scenarioId])
    @@unique([channelId, name])
    @@index([channelId])
}

model WorkflowCategory {
    id String @id @db.VarChar(40)

    workflowId String    @db.VarChar(40)
    workflow   Recording @relation(fields: [workflowId], references: [id], onDelete: Cascade)

    categoryId String   @db.VarChar(40)
    category   Category @relation(fields: [categoryId], references: [id], onDelete: Cascade)

    @@unique([workflowId, categoryId])
}

model Recording {
    id                   String                @id @db.VarChar(40)
    deleted              Boolean               @default(false)
    title                String?               @db.VarChar(255)
    host                 String?               @db.VarChar(255)
    steps                Json
    oldSteps             Json?
    version              Int                   @default(0)
    description          String?               @db.VarChar(255)
    iconUrl              String?               @db.VarChar(255)
    iconName             String?               @db.VarChar(40)
    iconColor            String?               @db.VarChar(10)
    type                 RecordingType         @default(Recording)
    fullAgentProcessType FullAgentProcessType?
    entryHref            String?               @db.Text
    pluginVersion        String?               @db.VarChar(20)
    aiQuestion           String?               @db.VarChar(255)
    instruction          String?               @db.VarChar(255)

    isParamGenerated Boolean @default(false)

    device      DeviceType @default(All)
    screenWidth Int        @default(0)

    referenceId String? @db.VarChar(40)

    transformed Boolean @default(false)

    creator      User?   @relation(fields: [creatorId], references: [id], onDelete: Cascade)
    creatorId    String? @db.VarChar(40)
    lastEditorId String? @db.VarChar(40)

    createdAt DateTime  @default(now())
    updatedAt DateTime  @updatedAt
    deletedAt DateTime?

    channelId String  @db.VarChar(40)
    channel   Channel @relation(fields: [channelId], references: [id], onDelete: Cascade)

    praiseLogs PraiseLog[]
    thumbsLogs ThumbsLog[]
    // notifications Notification[]

    refs              RecordingRef[]      @relation("recording-ref")
    recordingScenario RecordingScenario[]

    subFlows   WorkflowNode[] @relation("CombinedFLow") // 关联的flow
    usingNodes WorkflowNode[] @relation("AtomFLow") // 使用的flow

    aliases WorkflowAlias[] @relation("Workflow")

    outputs AtomFlowOutput[]
    params  CombinedFlowParam[]

    WorkflowCategory   WorkflowCategory[]
    SystemShortcut     SystemShortcut[]
    UserShortcutConfig UserShortcutConfig[]
    CombinedFlowLoops  CombinedFlowLoop[]   @relation("LoopsOfCOmbinedFlow")

    @@index([updatedAt, createdAt])
    @@index([channelId])
    @@index([channelId, deleted])
}

model AtomFlowOutput {
    id       String       @id @db.VarChar(40)
    stepId   String       @db.VarChar(40)
    type     String       @db.VarChar(40)
    stepRule StepRuleType
    name     String       @db.VarChar(255)
    deleted  Boolean      @default(false)

    workflowId String    @db.VarChar(40)
    workflow   Recording @relation(fields: [workflowId], references: [id], onDelete: Cascade)

    usingParams CombinedFlowParam[]

    @@unique([stepId, name, stepRule, workflowId])
    @@index([stepId, name, stepRule, workflowId])
}

model WorkflowNode {
    id       String  @id @db.VarChar(40)
    type     String  @db.VarChar(40)
    priority Int?
    metadata Json?
    optional Boolean @default(false)

    deleted      Boolean   @default(false)
    creator      User?     @relation(fields: [creatorId], references: [id], onDelete: Cascade)
    creatorId    String?   @db.VarChar(40)
    lastEditorId String?   @db.VarChar(40)
    createdAt    DateTime  @default(now())
    updatedAt    DateTime  @updatedAt
    deletedAt    DateTime?
    prompt       String?   @db.Text

    parentId   String?        @db.VarChar(40)
    parentNode WorkflowNode?  @relation("Parent", fields: [parentId], references: [id], onDelete: Cascade)
    subNodes   WorkflowNode[] @relation("Parent")

    nextId       String?       @unique @db.VarChar(40)
    nextNode     WorkflowNode? @relation("Next", fields: [nextId], references: [id])
    previousNode WorkflowNode? @relation("Next")

    combinedFlowId String    @db.VarChar(40)
    combinedFlow   Recording @relation("CombinedFLow", fields: [combinedFlowId], references: [id], onDelete: Cascade)

    atomFlowId String?    @db.VarChar(40)
    atomFlow   Recording? @relation("AtomFLow", fields: [atomFlowId], references: [id], onDelete: SetNull)

    componentId String?    @db.VarChar(40)
    component   Component? @relation("Component", fields: [componentId], references: [id], onDelete: SetNull)

    inputs  WorkflowNodeInput[]
    outputs WorkflowNodeOutput[]
}

model CombinedFlowParam {
    id   String  @id @db.VarChar(40)
    name String? @db.VarChar(255)
    type String  @db.VarChar(40)

    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt

    combinedFlowId String    @db.VarChar(40)
    combinedFlow   Recording @relation(fields: [combinedFlowId], references: [id], onDelete: Cascade)

    // 当类型为Prompt、Cache时,参数信息(type,originName,subType)由atomFlowOutputId获取
    atomFlowOutputId String?         @db.VarChar(40)
    atomFlowOutput   AtomFlowOutput? @relation(fields: [atomFlowOutputId], references: [id])

    componentOutputId String?          @db.VarChar(40)
    componentOutput   ComponentOutput? @relation(fields: [componentOutputId], references: [id])

    usingOutput WorkflowNodeOutput[]
    usingInput  WorkflowNodeInput[]
}

model WorkflowNodeInput {
    id               String   @id @db.VarChar(40)
    usingPromptLabel String?  @db.VarChar(255)
    createdAt        DateTime @default(now())
    updatedAt        DateTime @updatedAt

    nodeId String       @db.VarChar(40)
    node   WorkflowNode @relation(fields: [nodeId], references: [id], onDelete: Cascade)

    paramId String             @db.VarChar(40)
    param   CombinedFlowParam? @relation(fields: [paramId], references: [id], onDelete: Cascade)
}

model WorkflowNodeOutput {
    id        String   @id @db.VarChar(40)
    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt

    nodeId String       @db.VarChar(40)
    node   WorkflowNode @relation(fields: [nodeId], references: [id], onDelete: Cascade)

    paramId String            @db.VarChar(40)
    param   CombinedFlowParam @relation(fields: [paramId], references: [id], onDelete: Cascade)
}

model Component {
    id          String  @id @db.VarChar(40)
    title       String?
    type        String  @unique()
    description String? @db.VarChar(255)

    usingNodes WorkflowNode[]    @relation("Component") // 使用的flow
    params     ComponentOutput[]
    fields     ComponentField[]
}

model ComponentOutput {
    id      String  @id @db.VarChar(40)
    name    String  @db.VarChar(255)
    type    String  @db.VarChar(40)
    subType String? @db.VarChar(255)

    componentId String    @db.VarChar(40)
    component   Component @relation(fields: [componentId], references: [id], onDelete: Cascade)

    usingParams CombinedFlowParam[]
}

model ComponentField {
    id          String  @id @db.VarChar(40)
    name        String  @db.VarChar(255)
    description String? @db.VarChar(255)

    componentId String?    @db.VarChar(40)
    component   Component? @relation(fields: [componentId], references: [id], onDelete: SetNull)

    @@unique([componentId, name])
}

model RecordingScenario {
    recordingId      String           @db.VarChar(40)
    scenarioId       String           @db.VarChar(40)
    scenarioHrefType ScenarioHrefType @default(Private)
    useApi           Boolean          @default(false)
    defaultHref      String?          @db.Text

    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt

    recording Recording @relation(fields: [recordingId], references: [id], onDelete: Cascade)
    scenario  Scenario  @relation(fields: [scenarioId], references: [id])

    @@id([recordingId, scenarioId])
    @@index([scenarioId])
    @@index([recordingId])
}

model CombinedFlowLoop {
    id               String  @id @db.VarChar(40)
    combinedFlowId   String  @db.VarChar(40)
    // startFrom        String? @db.VarChar(40)
    // finishAt         String? @db.VarChar(40)
    loopRoundsPrompt String? @db.VarChar(40) // 考虑与node prompt 共用
    loopRounds       Int?
    parentLoopId     String? @db.VarChar(40)

    combinedFlow Recording          @relation(name: "LoopsOfCOmbinedFlow", fields: [combinedFlowId], references: [id], onDelete: Cascade)
    parentLoop   CombinedFlowLoop?  @relation(name: "Loop", fields: [parentLoopId], references: [id], onDelete: SetNull)
    chiledLoops  CombinedFlowLoop[] @relation("Loop")
}

model WorkflowAlias {
    id    String @id @db.VarChar(40)
    alias String @db.VarChar(255)

    workflowId String    @db.VarChar(40)
    workflow   Recording @relation(name: "Workflow", fields: [workflowId], references: [id], onDelete: Cascade)

    @@unique([workflowId, alias])
}

model PraiseLog {
    id        String  @id @db.VarChar(40)
    visitorId String  @db.VarChar(50)
    processId String? @db.VarChar(40)

    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt

    creator   User?   @relation(fields: [creatorId], references: [id], onDelete: Cascade)
    creatorId String? @db.VarChar(40)

    recordingId String?    @db.VarChar(40)
    recording   Recording? @relation(fields: [recordingId], references: [id], onDelete: Cascade)
}

model ThumbsLog {
    id        String @id @db.VarChar(40)
    visitorId String @db.VarChar(50)

    type ThumbsType

    creator   User?   @relation(fields: [creatorId], references: [id], onDelete: Cascade)
    creatorId String? @db.VarChar(40)

    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt

    recordingId String    @db.VarChar(40)
    recording   Recording @relation(fields: [recordingId], references: [id], onDelete: Cascade)
}

model ChannelMemberInvitation {
    id              String            @id @default(uuid()) @db.VarChar(40)
    targetChannelId String            @db.VarChar(40)
    targetRole      ChannelMemberRole
    code            String            @db.VarChar(10)

    creator   User   @relation(fields: [creatorId], references: [id], onDelete: Cascade)
    creatorId String @db.VarChar(40)

    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt
}

model ChannelMember {
    id   String            @id @db.VarChar(40)
    role ChannelMemberRole

    userId String @db.VarChar(40)
    user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)

    channelId String  @db.VarChar(40)
    channel   Channel @relation(fields: [channelId], references: [id], onDelete: Cascade)

    order Int @default(1) // 注意是表示用户配置的channel的order，此处有点歧义

    createdAt      DateTime         @default(now())
    updatedAt      DateTime         @updatedAt
    CategoryMember CategoryMember[]

    @@unique([channelId, userId])
}

model CategoryMember {
    id   String             @id @db.VarChar(40)
    role ChannelMemberRole?

    channelMemberId String        @db.VarChar(40)
    channelMember   ChannelMember @relation(fields: [channelMemberId], references: [id], onDelete: Cascade)

    categoryId String   @db.VarChar(40)
    category   Category @relation(fields: [categoryId], references: [id])

    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt

    @@unique([channelMemberId, categoryId])
}

model UserRole {
    id   String       @id @db.VarChar(40)
    type UserRoleType

    userId String @db.VarChar(40)
    user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model RecordingRef {
    id String @db.VarChar(40)

    recording   Recording @relation("recording-ref", fields: [recordingId], references: [id], onDelete: Cascade)
    recordingId String    @unique @db.VarChar(40)

    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt

    @@id([id, recordingId])
}

model DefaultLabel {
    id  String @id @db.VarChar(40)
    tag String @unique @db.VarChar(255)

    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt
}

model Label {
    id  String @id @db.VarChar(40)
    tag String @db.VarChar(255)

    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt

    creator   User   @relation(fields: [creatorId], references: [id], onDelete: Cascade)
    creatorId String @db.VarChar(40)
}

model VisitorUsedToken {
    visitorId String @id @db.VarChar(50)
    // interface String @db.VarChar(255)

    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt
}

model ProcessResultTable {
    id   String  @id @db.VarChar(50)
    name String? @db.VarChar(255)

    workflowId String @db.VarChar(40)
    processId  String @db.VarChar(40)
    metadata   Json?

    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt

    columns ProcessResultColumn[]
}

model ProcessResultColumn {
    id       String @id @db.VarChar(50)
    name     String @db.VarChar(255)
    order    Int    @default(1)
    width    Int    @default(150)
    metadata Json?

    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt

    tableId String              @db.VarChar(40)
    table   ProcessResultTable? @relation(fields: [tableId], references: [id], onDelete: Cascade)

    cells ProcessResultCell[]
}

model ProcessResultCell {
    id    String @id @db.VarChar(50)
    rowId String @db.VarChar(50)

    dataType ProcessResultCellDataType
    value    String                    @db.LongText
    metadata Json?

    columnId String               @db.VarChar(40)
    column   ProcessResultColumn? @relation(fields: [columnId], references: [id], onDelete: Cascade)
}

enum ProcessResultCellDataType {
    String
    Object
}

enum DisplayType {
    Banner
    Tiles
}

enum ActivationMethod {
    Url
    Workflow
}

enum UserRoleType {
    SystemAdmin
    Admin
    Scholar
}

enum ApiType {
    googleSheet
}

enum ChannelMemberRole {
    Viewer
    Editor
    Admin
    Owner
}

enum ThumbsType {
    ThumbsUp
    ThumbsDown
}

enum RecordingType {
    Recording
    Page
    CombinedFlow
}

enum FullAgentProcessType {
    WebResearch
    WebNavigation
}

enum DeviceType {
    All
    Desktop
    Mobile
}

enum TriggerType {
    Auto
    Event
}

enum TriggerRate {
    Once
    Always
    Custom
}

enum TriggerPeriod {
    Day
    Week
    Month
    Year
}

enum ScenarioHrefType {
    Fixed
    Private
}

enum CategoryPermissionPolicy {
    AllMembers
    SeletedMembers
}

enum ChannelType {
    Official
    Private
    Public
}

enum StepRuleType {
    ActionRule
    MatchRule
}
