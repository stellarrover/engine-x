//////////////////////////////////////////////////////////////////////////////////////////////
// DO NOT MODIFY THIS FILE                                                                  //
// This file is automatically generated by ZenStack CLI and should not be manually updated. //
//////////////////////////////////////////////////////////////////////////////////////////////

datasource db {
    provider = "mysql"
    url = env("DATABASE_URL")
}

generator client {
    provider = "prisma-client-js"
}

enum UserRoleType {
    SystemAdmin
    Scholar
}

enum WorkflowNodeType {
    AlternativeFlow
    Component
}

enum WorkflowNodeParamYype {
    Input
    Output
}

enum ComponentType {
    UI
    AI
}

model User {
    id String @id() @db.VarChar(40)
    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt()
    account String @unique() @db.VarChar(50)
    nickname String? @db.VarChar(30)
    avatar String? @db.LongText()
    password String? @db.VarChar(255)
    socialInfos UserSocialInfo[]
    walletInfos UserWalletInfo[]
    userRoles UserRole[]
    userSetting UserSetting?
    scenarioConfig UserScenario[]
    workflows Workflow[]
    components Component[]
    workflowNodes WorkflowNode[]
}

model UserWalletInfo {
    id String @id() @db.VarChar(40)
    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt()
    provider String @db.VarChar(20)
    address String @db.VarChar(255)
    userId String @db.VarChar(40)
    user User @relation(fields: [userId], references: [id], onDelete: Cascade)

    @@unique([address])
    @@index([address])
}

model UserSocialInfo {
    id String @id() @db.VarChar(40)
    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt()
    provider String @db.VarChar(20)
    openId String @db.VarChar(255)
    accessToken String @db.VarChar(255)
    refreshToken String @db.VarChar(255)
    userId String @db.VarChar(40)
    user User @relation(fields: [userId], references: [id])
}

model UserRole {
    id String @id() @db.VarChar(40)
    type UserRoleType
    userId String @db.VarChar(40)
    user User @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model UserSetting {
    id String @id() @db.VarChar(40)
    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt()
    rpm Int @default(5)
    rpd Int @default(50)
    userId String @unique() @db.VarChar(40)
    user User @relation(fields: [userId], references: [id])
}

model UserScenario {
    id String @id() @db.VarChar(40)
    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt()
    userId String @db.VarChar(40)
    scenarioId String @db.VarChar(40)
    href String? @db.Text()
    user User @relation(fields: [userId], references: [id])
    scenario Scenario @relation(fields: [scenarioId], references: [id])

    @@unique([userId, scenarioId])
}

model Scenario {
    id String @id() @db.VarChar(40)
    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt()
    name String @unique() @db.VarChar(30)
    favicon String? @db.VarChar(1000)
    host String? @db.VarChar(255)
    userScenario UserScenario[]
    workflowScenario WorkflowScenario[]
}

model Workflow {
    id String @id() @db.VarChar(40)
    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt()
    deleted Boolean @default(false)
    deletedAt DateTime?
    creatorId String @db.VarChar(40)
    creator User @relation(fields: [creatorId], references: [id], onDelete: Cascade)
    lastEditorId String? @db.VarChar(40)
    title String @db.VarChar(255)
    description String @db.VarChar(255)
    version Int @default(0)
    subFlows WorkflowNode[]
    params WorkflowParam[]
    scenarios WorkflowScenario[]
    aliases WorkflowAlias[]
}

model WorkflowNode {
    id String @id() @db.VarChar(40)
    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt()
    deleted Boolean @default(false)
    deletedAt DateTime?
    creatorId String @db.VarChar(40)
    creator User @relation(fields: [creatorId], references: [id], onDelete: Cascade)
    lastEditorId String? @db.VarChar(40)
    type WorkflowNodeType
    priority Int?
    metadata Json?
    optional Boolean @default(false)
    prompt String? @db.Text()
    parentId String? @db.VarChar(40)
    parentNode WorkflowNode? @relation("Parent", fields: [parentId], references: [id], onDelete: Cascade)
    subNodes WorkflowNode[] @relation("Parent")
    nextId String? @unique() @db.VarChar(40)
    nextNode WorkflowNode? @relation("Next", fields: [nextId], references: [id])
    previousNode WorkflowNode? @relation("Next")
    rootId String @db.VarChar(40)
    root Workflow @relation(fields: [rootId], references: [id], onDelete: Cascade)
    componentId String? @db.VarChar(40)
    component Component? @relation(fields: [componentId], references: [id], onDelete: SetNull)
    params WorkflowNodeParam[]
}

model WorkflowParam {
    id String @id() @db.VarChar(40)
    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt()
    name String? @db.VarChar(255)
    rootId String @db.VarChar(40)
    root Workflow @relation(fields: [rootId], references: [id], onDelete: Cascade)
    ComponentParamId String? @db.VarChar(40)
    ComponentParam ComponentParam? @relation(fields: [ComponentParamId], references: [id])
    usingNode WorkflowNodeParam[]
}

model WorkflowScenario {
    id String @id() @db.VarChar(40)
    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt()
    recordingId String @db.VarChar(40)
    scenarioId String @db.VarChar(40)
    defaultHref String? @db.Text()
    workflow Workflow @relation(fields: [recordingId], references: [id], onDelete: Cascade)
    scenario Scenario @relation(fields: [scenarioId], references: [id])
}

model WorkflowAlias {
    id String @id() @db.VarChar(40)
    alias String @db.VarChar(255)
    workflowId String @db.VarChar(40)
    workflow Workflow @relation(fields: [workflowId], references: [id], onDelete: Cascade)

    @@unique([workflowId, alias])
}

model Component {
    id String @id() @db.VarChar(40)
    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt()
    deleted Boolean @default(false)
    deletedAt DateTime?
    creatorId String @db.VarChar(40)
    creator User @relation(fields: [creatorId], references: [id], onDelete: Cascade)
    lastEditorId String? @db.VarChar(40)
    title String @db.VarChar(255)
    description String @db.VarChar(255)
    version Int @default(0)
    metadata Json?
    type ComponentType
    usingNodes WorkflowNode[]
    outputs ComponentParam[]
}

model ComponentParam {
    id String @id() @db.VarChar(40)
    name String @db.VarChar(255)
    type String
    metadata Json?
    componentId String @db.VarChar(40)
    component Component @relation(fields: [componentId], references: [id], onDelete: Cascade)
    usingParams WorkflowParam[]
}

model WorkflowNodeParam {
    id String @id() @db.VarChar(40)
    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt()
    type WorkflowNodeParamYype
    nodeId String @db.VarChar(40)
    node WorkflowNode @relation(fields: [nodeId], references: [id], onDelete: Cascade)
    paramId String @db.VarChar(40)
    param WorkflowParam? @relation(fields: [paramId], references: [id], onDelete: Cascade)
}