//////////////////////////////////////////////////////////////////////////////////////////////
// DO NOT MODIFY THIS FILE                                                                  //
// This file is automatically generated by ZenStack CLI and should not be manually updated. //
//////////////////////////////////////////////////////////////////////////////////////////////

datasource db {
    provider = "mysql"
    url = env("DATABASE_URL")
}

generator client {
    provider = "prisma-client-js"
}

enum UserRoleType {
    SystemAdmin
    Admin
    Scholar
}

model User {
    id String @id() @db.VarChar(40)
    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt()
    account String @unique() @db.VarChar(50)
    nickname String? @db.VarChar(30)
    avatar String? @db.LongText()
    password String? @db.VarChar(255)
    socialInfos UserSocialInfo[]
    walletInfos UserWalletInfo[]
    userRoles UserRole[]
    userSetting UserSetting?
    scenarioConfig UserScenario[]
}

model UserWalletInfo {
    id String @id() @db.VarChar(40)
    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt()
    provider String @db.VarChar(20)
    address String @db.VarChar(255)
    userId String @db.VarChar(40)
    user User @relation(fields: [userId], references: [id], onDelete: Cascade)

    @@unique([address])
    @@index([address])
}

model UserSocialInfo {
    id String @id() @db.VarChar(40)
    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt()
    provider String @db.VarChar(20)
    openId String @db.VarChar(255)
    accessToken String @db.VarChar(255)
    refreshToken String @db.VarChar(255)
    userId String @db.VarChar(40)
    user User @relation(fields: [userId], references: [id])
}

model UserRole {
    id String @id() @db.VarChar(40)
    type UserRoleType
    userId String @db.VarChar(40)
    user User @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model UserSetting {
    id String @id() @db.VarChar(40)
    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt()
    rpm Int @default(5)
    rpd Int @default(50)
    userId String @unique() @db.VarChar(40)
    user User @relation(fields: [userId], references: [id])
}

model UserScenario {
    id String @id() @db.VarChar(40)
    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt()
    userId String @db.VarChar(40)
    scenarioId String @db.VarChar(40)
    href String? @db.Text()
    user User @relation(fields: [userId], references: [id])
    scenario Scenario @relation(fields: [scenarioId], references: [id])

    @@unique([userId, scenarioId])
}

model Scenario {
    id String @id() @db.VarChar(40)
    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt()
    name String @unique() @db.VarChar(30)
    favicon String? @db.VarChar(1000)
    host String? @db.VarChar(255)
    UserScenario UserScenario[]
}